{"version":3,"sources":["components/NavBar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","title","mode","about","toggleMode","className","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","role","htmlFor","protoTypes","PropTypes","string","isRequired","defaultProps","TextForm","heading","useState","text","setText","style","color","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","split","forEach","word","i","splice","join","copyText","document","getElementById","select","navigator","clipboard","writeText","length","trim","Alert","userName","alert","message","require","App","setMode","setAlert","showAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4f26a660.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst NavBar = ({title, about, mode, toggleMode}) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <nav className={`navbar navbar-expand-lg navbar-${mode} bg-${mode}`}>\r\n                    <div className=\"container-fluid\">\r\n                        <a className=\"navbar-brand\" href=\"/\"> {title} </a>\r\n                        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-a active\" aria-current=\"page\" href=\"#\"> Home </a>\r\n                            </li>                            \r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                            <div className={`form-check form-switch text-${mode === 'light'? `dark`: `light`}`}>\r\n                                <input className=\"form-check-input\" onClick={toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                                <label className=\"form-check-label\"  htmlFor=\"flexSwitchCheckDefault\"> {mode === 'light'? 'Enable Dark Mode': 'Disable Dark Mode'} </label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n\r\n// Its a check\r\n\r\nNavBar.protoTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired\r\n}\r\n\r\n// For a defualt values\r\n\r\nNavBar.defaultProps = {\r\n    title: \"Titlte Here\",\r\n    about: \"About Here\"\r\n}","import React, { useState } from 'react'\r\n\r\nconst TextForm = ({heading, mode}) => {\r\n\r\n    const [text, setText] = useState('Enter text here')\r\n\r\n    const handleUpClick = () => {\r\n        const newText = text.toUpperCase()\r\n        setText(newText)\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleAbusiveWord = () => {\r\n        const newText = text.split(' ')\r\n        \r\n        newText.forEach((word, i) => {\r\n            if(word === 'fuck' || word === 'Fuck'){\r\n                newText.splice(i, 1,'****')\r\n            }\r\n        })\r\n\r\n        setText(newText.join(' '))\r\n    }\r\n    \r\n    const handleClearText = () => {\r\n        setText('')\r\n    }\r\n\r\n    const handleCopyText = () => {\r\n        const copyText = document.getElementById('textArea')\r\n        copyText.select()\r\n        navigator.clipboard.writeText(copyText.value)\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{color: mode === 'dark'? 'white': 'black'}}>\r\n                <div className=\"container my-3\">\r\n                    <h1> {heading} </h1>\r\n                    \r\n                    <div className=\"my-3\">\r\n                        <label htmlFor=\"textArea\" className=\"form-label\">Textarea</label>\r\n                        <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: mode==='dark'? '#343a40': 'white', color: mode === 'dark'? 'white': 'black'}} id=\"textArea\" rows=\"5\"></textarea>\r\n                    </div>\r\n                    \r\n                    <button className=\"btn btn-primary\" onClick={handleUpClick}> Convert to Uppercase </button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={handleAbusiveWord}> Filter </button>\r\n                    <button className=\"btn btn-primary\" onClick={handleCopyText}> Copy </button>\r\n                    <button className=\"btn btn-primary mx-2\" onClick={handleClearText}> Clear </button>\r\n                </div>\r\n\r\n                <div className=\"container my-3\">\r\n                    <h1>Text Summary</h1>\r\n                    <p> Words: {text.length>0? text.trim().split(\" \").length: 0} - Characters: {text.length} </p>\r\n                    <p> { 0.008 * text.split(\" \").length } Minutes required to read </p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TextForm\r\n","import React from 'react'\r\n\r\nconst Alert = ({userName, alert}) => {\r\n    return (\r\n        alert && <div className={` alert alert-${alert.type} alert-dismissible fade show`} role=\"alert\" >\r\n            <strong>{userName}!</strong> {alert.message}.\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport React, { useState } from 'react'\nimport NavBar  from './components/NavBar';\nimport TextForm from './components/TextForm'\nimport Alert from './components/Alert';\n// import TimePicker from './components/TimePicker';\n\nconst moment = require('moment-timezone')\n\nfunction App() {\n\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n  // Function to Show something after a particular time \n  const setTime = () => {\n    const dateTime = moment('Mon Nov 01 2021 04:57:00 GMT+0500')\n    const newDateTime = ( dateTime - new Date().getTime() )\n\n    setTimeout(() => {\n      showAlert('Working Fine', 'success')\n    }, newDateTime);\n  }\n  \n  // Function to Give Values to Alert Sate\n  const showAlert = (message, type) => {\n    setAlert({\n      message,\n      type\n    })\n\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor = '#343a40'\n      \n      // Function\n      showAlert('Dark Mode has been Enabled', 'success')\n    }\n\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n    }\n  }\n  return (\n    <div>\n        <NavBar title=\"CrazyVolt\" about=\"About\" mode={mode} toggleMode={toggleMode}/>\n\n        <Alert userName='Anas' alert={alert}/>\n\n        <div className=\"container\">\n            <TextForm heading=\"Enter the text\" mode={mode}/>\n        </div>\n\n        {/* < TimePicker/> */}\n    </div>  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}